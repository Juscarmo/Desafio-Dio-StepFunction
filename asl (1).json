{
  "Comment": "An example of using Express workflows to run text processing for each message sent from an SQS queue.",
  "QueryLanguage": "JSONata",
  "StartAt": "ListVerifiedEmailAddresses",
  "States": {
    "ListVerifiedEmailAddresses": {
      "Type": "Task",
      "Arguments": {},
      "Resource": "arn:aws:states:::aws-sdk:ses:listVerifiedEmailAddresses",
      "Next": "Generate Statistics"
    },
    "Generate Statistics": {
      "Arguments": {
        "FunctionName": "MyLambdaFunction",
        "Payload": {
          "input": "{% $states.input %}",
          "output": "{% $base64decode($parse($states.input[0].body).input) %}"
        }
      },
      "Next": "Remove Special Characters",
      "Output": "{% $states.result.Payload %}",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Retry": [
        {
          "BackoffRate": 2,
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "Type": "Task"
    },
    "Remove Special Characters": {
      "Next": "CopyObject",
      "Output": {
        "input": "{% $states.input.input %}",
        "output": "{% ($regexp := /[^a-zA-Z]/; $replace($states.input.input, $regexp, \" \")) %}"
      },
      "Type": "Pass"
    },
    "CopyObject": {
      "Type": "Task",
      "Arguments": {
        "Bucket": "MyData",
        "CopySource": "MyData",
        "Key": "MyData"
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:copyObject",
      "Next": "Tokenize"
    },
    "Tokenize": {
      "Arguments": {
        "FunctionName": "MyLambdaFunction",
        "Payload": "{% $states.input %}"
      },
      "Output": "{% $states.result.Payload %}",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Retry": [
        {
          "BackoffRate": 2,
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "Type": "Task",
      "Next": "Bedrock InvokeModel"
    },
    "Bedrock InvokeModel": {
      "Type": "Task",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Arguments": {
        "ModelId": "arn:aws:bedrock:us-east-1::foundation-model/openai.gpt-oss-120b-1:0",
        "Body": {}
      },
      "Next": "DynamoDB UpdateItem"
    },
    "DynamoDB UpdateItem": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Arguments": {
        "TableName": "MyDynamoDBTable",
        "Key": {
          "Column": {
            "S": "MyEntry"
          }
        },
        "UpdateExpression": "SET MyKey = :myValueRef",
        "ExpressionAttributeValues": {
          ":myValueRef": {
            "S": "MyValue"
          }
        }
      },
      "End": true
    }
  }
}